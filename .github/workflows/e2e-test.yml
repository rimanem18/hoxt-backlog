name: E2E Test

on:
  workflow_call:

permissions:
  contents: read

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    
    services:
      db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: postgres
        options: >-
          --health-cmd "pg_isready -h 127.0.0.1 -p 5432 -U postgres -d postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 5s

    container:
      image: mcr.microsoft.com/playwright:v1.55.0-jammy
      options: --shm-size=1gb
      env:
        CI: true
        HOME: /root  # Fix Firefox launch issue in GitHub Actions

    concurrency:
      group: e2e-${{ github.ref }}
      cancel-in-progress: true

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install required tools and fix Firefox HOME issue
        run: |
          apt-get update
          apt-get install -y unzip
          # Fix Firefox HOME issue by setting proper ownership
          export HOME=/root
          echo "HOME=/root" >> $GITHUB_ENV

      - name: Setup Bun Environment for Client
        uses: ./.github/actions/setup-bun
        with:
          working-directory: ./app/client
          cache-key-suffix: e2e-client

      - name: Setup PostgreSQL Environment
        uses: ./.github/actions/setup-postgres
        with:
          db-host: db
          db-name: postgres
          db-user: postgres
          db-password: test_password

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install server dependencies
        working-directory: ./app/server
        run: |
          bun install --frozen-lockfile
          npm install

      - name: Start services and run E2E tests
        env:
          CLIENT_PORT: 3000
          SERVER_PORT: 3001
          NEXT_PUBLIC_API_BASE_URL: "http://localhost:3001/api"
          # Supabase test environment variables (mocked)
          NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
          NEXT_PUBLIC_SUPABASE_ANON_KEY: test_anon_key
          # Additional client environment variables from compose.yaml
          NEXT_PUBLIC_TRUSTED_DOMAINS: localhost:3000,localhost:3001
          NEXT_PUBLIC_SITE_URL: http://localhost:3000
        run: |
          set -e
          
          echo "--- Installing PostgreSQL client ---"
          apt-get update && apt-get install -y postgresql-client
          
          echo "--- Waiting for PostgreSQL to be ready ---"
          # Wait for PostgreSQL to be accessible via service name
          for i in $(seq 1 30); do
            if pg_isready -h db -p 5432 -U postgres; then
              echo "PostgreSQL is ready!"
              break
            fi
            echo "Waiting for PostgreSQL... (attempt $i/30)"
            sleep 2
          done
          
          echo "--- Starting server in background (Node.js runtime) ---"
          cd ./app/server
          SERVER_PORT=3001 \
          ACCESS_ALLOW_ORIGIN=http://localhost:3000 \
          ACCESS_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS \
          ACCESS_ALLOW_HEADERS=Authorization,Content-Type \
          SUPABASE_URL=http://localhost:54321 \
          DB_HOST=db \
          DB_PORT=5432 \
          DB_NAME=postgres \
          DB_USER=postgres \
          DB_PASSWORD=test_password \
          BASE_SCHEMA=test_schema \
          DATABASE_URL=postgresql://postgres:test_password@db:5432/postgres \
          DB_CONNECT_TIMEOUT_SECONDS=3 \
          DB_IDLE_TIMEOUT_SECONDS=10 \
          DB_MAX_CONNECTIONS=5 \
          npm run start:node &
          SERVER_PID=$!
          cd ../..
          
          echo "--- Starting client in background ---"
          cd ./app/client
          bun run dev &
          CLIENT_PID=$!
          cd ../..
          
          echo "--- Waiting for services to be ready ---"
          for i in $(seq 1 30); do
            if curl -f http://localhost:3000 >/dev/null 2>&1 && \
               curl -f http://localhost:3001/api/health >/dev/null 2>&1; then
              echo "All services are ready!"
              break
            fi
            echo "Waiting for services... (attempt $i/30)"
            if [ $i -lt 10 ]; then
              sleep 2
            else  
              sleep 5
            fi
          done
          
          echo "--- Running Playwright tests ---"
          cd ./app/client
          bun run test:e2e
          
          # Cleanup background processes
          kill $SERVER_PID $CLIENT_PID || true

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: app/client/playwright-report/
          retention-days: 30