name: Production Deployment

on:
  pull_request:
    branches:
      - main
    types: [closed]  # PRクローズ時にトリガー
  workflow_dispatch:  # 手動実行オプション
    inputs:
      environment:
        description: 'Deployment environment (production or preview)'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - preview

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: ap-northeast-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  # Phase 0: 環境判定
  setup-environment:
    name: Setup Environment
    # PRマージまたは手動実行のみ実行
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    outputs:
      environment-type: ${{ steps.env.outputs.environment-type }}
      is-production: ${{ steps.env.outputs.is-production }}
      is-preview: ${{ steps.env.outputs.is-preview }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # PRマージの場合はマージコミットを使用
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Determine Environment
        id: env
        uses: ./.github/actions/setup-environment
        with:
          environment-override: ${{ github.event.inputs.environment || '' }}

  # Phase 1: Client テスト実行
  client-test:
    name: Client Unit Tests
    needs: [setup-environment]
    if: |
      (github.event_name == 'pull_request' && github.event.pull_request.merged == true) ||
      github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    timeout-minutes: 8
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Run Client Tests
        uses: ./.github/actions/client-test
        with:
          working-directory: ./app/client

  # Phase 2: Server テスト実行
  server-test:
    name: Server Unit Tests
    needs: [client-test]
    if: needs.client-test.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 12

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres -d postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Run Server Tests
        uses: ./.github/actions/server-test
        with:
          working-directory: ./app/server
          db-host: localhost
          db-name: postgres
          db-user: postgres
          db-password: test_password

  # Phase 3: E2E テスト実行
  e2e-test:
    name: E2E Tests
    needs: [server-test]
    if: needs.server-test.result == 'success'
    runs-on: ubuntu-latest
    timeout-minutes: 15

    services:
      db:
        image: postgres:15-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -h 127.0.0.1 -p 5432 -U postgres -d postgres"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 5s

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Install PostgreSQL client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Run E2E Tests
        uses: ./.github/actions/e2e-test
        with:
          client-directory: ./app/client
          server-directory: ./app/server
          db-host: localhost
          db-name: postgres
          db-user: postgres
          db-password: test_password

  # Phase 4: デプロイ開始記録
  log-deployment-start:
    name: Log Deployment Start
    needs: [setup-environment, e2e-test]
    if: needs.e2e-test.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Record Deployment Start
        uses: ./.github/actions/deployment-logger
        with:
          event-type: 'start'
          component: 'full-stack'
          environment: ${{ needs.setup-environment.outputs.environment-type }}
          details: 'Starting full stack deployment'

  # Phase 5: インフラストラクチャデプロイ
  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [setup-environment, e2e-test, log-deployment-start]
    if: needs.e2e-test.result == 'success'
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/deploy-infra.yml
    with:
      terraform-version: ${{ vars.TERRAFORM_VERSION }}
      aws-region: ${{ vars.AWS_REGION }}
      environment-type: ${{ needs.setup-environment.outputs.environment-type }}
    secrets: inherit

  # Phase 6: データベースマイグレーション
  deploy-database:
    name: Deploy Database
    needs: [setup-environment, e2e-test, deploy-infrastructure]
    if: needs.e2e-test.result == 'success'
    uses: ./.github/workflows/deploy-database.yml
    with:
      timeout-minutes: 10
      environment-type: ${{ needs.setup-environment.outputs.environment-type }}
    secrets: inherit

  # Phase 7: バックエンドデプロイ（database完了後、frontendと並行実行）
  deploy-backend:
    name: Deploy Backend
    needs: [setup-environment, e2e-test, deploy-infrastructure, deploy-database]
    if: needs.e2e-test.result == 'success'
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/deploy-backend.yml
    with:
      lambda-function-name: ${{ needs.setup-environment.outputs.is-production == 'true' && needs.deploy-infrastructure.outputs.lambda-function-name-production || needs.deploy-infrastructure.outputs.lambda-function-name-preview }}
      environment-type: ${{ needs.setup-environment.outputs.environment-type }}
      aws-region: ${{ vars.AWS_REGION }}
      cors-allow-origin: ${{ needs.setup-environment.outputs.is-production == 'true' && needs.deploy-infrastructure.outputs.access-allow-origin-production || needs.deploy-infrastructure.outputs.access-allow-origin-preview }}
    secrets: inherit

  # Debug: インフラ出力確認
  debug-infrastructure-outputs:
    name: Debug Infrastructure Outputs
    needs: [setup-environment, e2e-test, deploy-infrastructure]
    if: needs.e2e-test.result == 'success'
    runs-on: ubuntu-latest
    steps:
      - name: Debug Infrastructure Outputs
        run: |
          echo "🔍 Infrastructure Outputs Debug:"
          echo "Environment: ${{ needs.setup-environment.outputs.environment-type }}"
          echo "Is Production: ${{ needs.setup-environment.outputs.is-production }}"
          echo "Event: ${{ github.event_name }}"
          echo ""
          echo "📋 Production Outputs:"
          echo "next-public-api-base-url-production: ${{ needs.deploy-infrastructure.outputs.next-public-api-base-url-production }}"
          echo "next-public-site-url-production: ${{ needs.deploy-infrastructure.outputs.next-public-site-url-production }}"
          echo ""
          echo "📋 Preview Outputs:"
          echo "next-public-api-base-url-preview: ${{ needs.deploy-infrastructure.outputs.next-public-api-base-url-preview }}"
          echo "next-public-site-url-preview: ${{ needs.deploy-infrastructure.outputs.next-public-site-url-preview }}"
          echo ""
          echo "✅ Selected Values:"
          echo "next-public-api-base-url: ${{ needs.setup-environment.outputs.is-production == 'true' && needs.deploy-infrastructure.outputs.next-public-api-base-url-production || needs.deploy-infrastructure.outputs.next-public-api-base-url-preview }}"
          echo "next-public-site-url: ${{ needs.setup-environment.outputs.is-production == 'true' && needs.deploy-infrastructure.outputs.next-public-site-url-production || needs.deploy-infrastructure.outputs.next-public-site-url-preview }}"

  # Phase 8: フロントエンドデプロイ（infrastructure完了後、backendと並行実行）
  deploy-frontend:
    name: Deploy Frontend
    needs: [setup-environment, e2e-test, deploy-infrastructure, debug-infrastructure-outputs]
    if: needs.e2e-test.result == 'success'
    uses: ./.github/workflows/deploy-frontend.yml
    with:
      environment-type: ${{ needs.setup-environment.outputs.environment-type }}
      next-public-api-base-url: ${{ needs.setup-environment.outputs.is-production == 'true' && needs.deploy-infrastructure.outputs.next-public-api-base-url-production || needs.deploy-infrastructure.outputs.next-public-api-base-url-preview }}
      next-public-site-url: ${{ needs.setup-environment.outputs.is-production == 'true' && needs.deploy-infrastructure.outputs.next-public-site-url-production || needs.deploy-infrastructure.outputs.next-public-site-url-preview }}
      next-public-trusted-domains: ${{ needs.setup-environment.outputs.is-production == 'true' && needs.deploy-infrastructure.outputs.next-public-trusted-domains-production || needs.deploy-infrastructure.outputs.next-public-trusted-domains-preview }}
      cloudflare-project-name: ${{ vars.PROJECT_NAME }}
    secrets: inherit

  # Phase 9: デプロイ成功通知
  notify-success:
    name: Notify Deployment Success
    if: success()
    needs: [setup-environment, client-test, server-test, e2e-test, deploy-infrastructure, deploy-database, deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Record Deployment Success
        uses: ./.github/actions/deployment-logger
        with:
          event-type: 'success'
          component: 'full-stack'
          environment: ${{ needs.setup-environment.outputs.environment-type }}
          details: 'All components deployed successfully'

      - name: Generate Deployment Summary
        uses: ./.github/actions/deployment-summary
        with:
          environment-type: ${{ needs.setup-environment.outputs.environment-type }}
          lambda-function-url: ${{ needs.setup-environment.outputs.is-production == 'true' && needs.deploy-infrastructure.outputs.next-public-api-base-url-production || needs.deploy-infrastructure.outputs.next-public-api-base-url-preview }}
          cloudflare-deployment-url: ${{ needs.deploy-frontend.outputs.deployment-url }}
          lambda-version: ${{ needs.deploy-backend.outputs.deployed-version }}
          terraform-outputs: ${{ needs.deploy-infrastructure.outputs.terraform-outputs }}
          commit-sha: ${{ github.sha }}
          branch-name: ${{ github.ref_name }}

      - name: Send Success Notification
        uses: ./.github/actions/discord-notify
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: 'success'
          title: '🚀 Production Deployment Completed Successfully!'
          components: '✅ Infrastructure (Terraform)\n✅ Database (drizzle-kit)\n✅ Backend (AWS Lambda)\n✅ Frontend (CloudFlare Pages)'
          commit-sha: ${{ github.sha }}
          branch-name: ${{ github.ref_name }}
          actor: ${{ github.actor }}
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}

  # Phase 10: デプロイ失敗通知
  notify-failure:
    name: Notify Deployment Failure
    if: failure()
    needs: [setup-environment, client-test, server-test, e2e-test, deploy-infrastructure, deploy-database, deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.merge_commit_sha || github.sha }}

      - name: Record Deployment Failure
        uses: ./.github/actions/deployment-logger
        with:
          event-type: 'failure'
          component: 'full-stack'
          environment: ${{ needs.setup-environment.outputs.environment-type }}
          details: 'Deployment failed - check logs for details'

      - name: Send Failure Notification
        uses: ./.github/actions/discord-notify
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: 'failure'
          title: '❌ Production Deployment Failed!'
          commit-sha: ${{ github.sha }}
          branch-name: ${{ github.ref_name }}
          actor: ${{ github.actor }}
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}
