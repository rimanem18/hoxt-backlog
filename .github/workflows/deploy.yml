name: Production Deployment

on:
  push:
    branches:
      - main    # REQ-104準拠: mainマージでproduction更新
      - HOXBL-27-main-deploy-workflow  # テスト用: ブランチで直接テスト
  workflow_dispatch: {}  # 手動実行オプション

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: false

env:
  AWS_REGION: ap-northeast-1
  TERRAFORM_VERSION: 1.6.0

jobs:
  # Phase 0: デプロイ開始記録
  log-deployment-start:
    name: Log Deployment Start
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Record Deployment Start
        uses: ./.github/actions/deployment-logger
        with:
          event-type: 'start'
          component: 'full-stack'
          environment: ${{ github.ref_name == 'main' && 'production' || 'preview' }}
          details: 'Starting full stack deployment'

  # Phase 1: インフラストラクチャデプロイ
  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: [log-deployment-start]
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/deploy-infra.yml
    with:
      terraform-version: ${{ vars.TERRAFORM_VERSION }}
      aws-region: ${{ vars.AWS_REGION }}
    secrets: inherit

  # Phase 2: データベースマイグレーション
  deploy-database:
    name: Deploy Database
    needs: [deploy-infrastructure]
    uses: ./.github/workflows/deploy-database.yml
    with:
      timeout-minutes: 10
    secrets: inherit

  # Phase 3: バックエンドデプロイ（database完了後、frontendと並行実行）
  deploy-backend:
    name: Deploy Backend
    needs: [deploy-database]
    permissions:
      id-token: write
      contents: read
    uses: ./.github/workflows/deploy-backend.yml
    with:
      lambda-function-name: ${{ github.ref_name == 'main' && needs.deploy-infrastructure.outputs.lambda-function-name-production || needs.deploy-infrastructure.outputs.lambda-function-name-preview }}
      environment-type: ${{ github.ref_name == 'main' && 'production' || 'preview' }}
      aws-region: ${{ vars.AWS_REGION }}
      cors-allow-origin: ${{ github.ref_name == 'main' && needs.deploy-infrastructure.outputs.access-allow-origin-production || needs.deploy-infrastructure.outputs.access-allow-origin-preview }}
    secrets: inherit

  # Phase 4: フロントエンドデプロイ（infrastructure完了後、backendと並行実行）
  deploy-frontend:
    name: Deploy Frontend
    needs: [deploy-infrastructure]
    uses: ./.github/workflows/deploy-frontend.yml
    with:
      environment-type: ${{ github.ref_name == 'main' && 'production' || 'preview' }}
      next-public-api-base-url: ${{ github.ref_name == 'main' && needs.deploy-infrastructure.outputs.next-public-api-base-url-production || needs.deploy-infrastructure.outputs.next-public-api-base-url-preview }}
      next-public-site-url: ${{ github.ref_name == 'main' && needs.deploy-infrastructure.outputs.next-public-site-url-production || needs.deploy-infrastructure.outputs.next-public-site-url-preview }}
      next-public-trusted-domains: ${{ github.ref_name == 'main' && needs.deploy-infrastructure.outputs.next-public-trusted-domains-production || needs.deploy-infrastructure.outputs.next-public-trusted-domains-preview }}
      cloudflare-project-name: ${{ vars.PROJECT_NAME }}
    secrets: inherit

  # Phase 5: デプロイ成功通知
  notify-success:
    name: Notify Deployment Success
    if: success()
    needs: [deploy-infrastructure, deploy-database, deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Record Deployment Success
        uses: ./.github/actions/deployment-logger
        with:
          event-type: 'success'
          component: 'full-stack'
          environment: ${{ github.ref_name == 'main' && 'production' || 'preview' }}
          details: 'All components deployed successfully'

      - name: Generate Deployment Summary
        uses: ./.github/actions/deployment-summary
        with:
          environment-type: ${{ github.ref_name == 'main' && 'production' || 'preview' }}
          lambda-function-url: ${{ github.ref_name == 'main' && needs.deploy-infrastructure.outputs.next-public-api-base-url-production || needs.deploy-infrastructure.outputs.next-public-api-base-url-preview }}
          cloudflare-deployment-url: ${{ needs.deploy-frontend.outputs.deployment-url }}
          lambda-version: ${{ needs.deploy-backend.outputs.deployed-version }}
          terraform-outputs: ${{ needs.deploy-infrastructure.outputs.terraform-outputs }}
          commit-sha: ${{ github.sha }}
          branch-name: ${{ github.ref_name }}

      - name: Send Success Notification
        uses: ./.github/actions/discord-notify
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: 'success'
          title: '🚀 Production Deployment Completed Successfully!'
          components: '✅ Infrastructure (Terraform)\n✅ Database (drizzle-kit)\n✅ Backend (AWS Lambda)\n✅ Frontend (CloudFlare Pages)'
          commit-sha: ${{ github.sha }}
          branch-name: ${{ github.ref_name }}
          actor: ${{ github.actor }}
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}

  # Phase 6: デプロイ失敗通知
  notify-failure:
    name: Notify Deployment Failure
    if: failure()
    needs: [deploy-infrastructure, deploy-database, deploy-backend, deploy-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Record Deployment Failure
        uses: ./.github/actions/deployment-logger
        with:
          event-type: 'failure'
          component: 'full-stack'
          environment: ${{ github.ref_name == 'main' && 'production' || 'preview' }}
          details: 'Deployment failed - check logs for details'

      - name: Send Failure Notification
        uses: ./.github/actions/discord-notify
        with:
          webhook-url: ${{ secrets.DISCORD_WEBHOOK_URL }}
          status: 'failure'
          title: '❌ Production Deployment Failed!'
          commit-sha: ${{ github.sha }}
          branch-name: ${{ github.ref_name }}
          actor: ${{ github.actor }}
          repository: ${{ github.repository }}
          run-id: ${{ github.run_id }}