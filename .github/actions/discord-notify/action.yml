name: 'Discord Notification'
description: 'Send deployment status notifications to Discord with customizable embeds'

inputs:
  webhook-url:
    description: 'Discord webhook URL'
    required: true
  status:
    description: 'Deployment status (success or failure)'
    required: true
  title:
    description: 'Notification title'
    required: false
    default: ''
  components:
    description: 'List of deployed components'
    required: false
    default: ''
  commit-sha:
    description: 'Git commit SHA'
    required: false
    default: ${{ github.sha }}
  branch-name:
    description: 'Git branch name'
    required: false
    default: ${{ github.ref_name }}
  actor:
    description: 'GitHub actor who triggered the deployment'
    required: false
    default: ${{ github.actor }}
  repository:
    description: 'GitHub repository'
    required: false
    default: ${{ github.repository }}
  run-id:
    description: 'GitHub Actions run ID'
    required: false
    default: ${{ github.run_id }}
  repository-url:
    description: 'Full repository URL'
    required: false
    default: ''
  frontend-url:
    description: 'Frontend production URL'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Prepare notification content
      id: prepare
      shell: bash
      env:
        INPUT_STATUS: ${{ inputs.status }}
        INPUT_TITLE: ${{ inputs.title }}
        INPUT_COMPONENTS: ${{ inputs.components }}
        GITHUB_SERVER_URL: ${{ github.server_url }}
        INPUT_REPOSITORY: ${{ inputs.repository }}
        INPUT_RUN_ID: ${{ inputs.run-id }}
      run: |
        # ステータスに応じた設定
        if [ "$INPUT_STATUS" = "success" ]; then
          TITLE="$INPUT_TITLE"
          if [ -z "$TITLE" ]; then
            TITLE="🚀 Production Deployment Completed Successfully!"
          fi
          COLOR=65280  # 緑色

          COMPONENTS="$INPUT_COMPONENTS"
          if [ -z "$COMPONENTS" ]; then
            COMPONENTS="✅ Infrastructure (Terraform)\\n✅ Database (drizzle-kit)\\n✅ Backend (AWS Lambda)\\n✅ Frontend (CloudFlare Pages)"
          fi

          echo "title=$TITLE" >> "$GITHUB_OUTPUT"
          echo "color=$COLOR" >> "$GITHUB_OUTPUT"
          echo "components=$COMPONENTS" >> "$GITHUB_OUTPUT"
        else
          TITLE="$INPUT_TITLE"
          if [ -z "$TITLE" ]; then
            TITLE="❌ Production Deployment Failed!"
          fi
          COLOR=16711680  # 赤色

          ACTION_MESSAGE="Please check the [job logs](${GITHUB_SERVER_URL}/${INPUT_REPOSITORY}/actions/runs/${INPUT_RUN_ID}) for details and retry the deployment."

          echo "title=$TITLE" >> "$GITHUB_OUTPUT"
          echo "color=$COLOR" >> "$GITHUB_OUTPUT"
          echo "action_message=$ACTION_MESSAGE" >> "$GITHUB_OUTPUT"
        fi

    - name: Send Discord notification
      shell: bash
      env:
        INPUT_STATUS: ${{ inputs.status }}
        INPUT_COMMIT_SHA: ${{ inputs.commit-sha }}
        INPUT_BRANCH_NAME: ${{ inputs.branch-name }}
        INPUT_ACTOR: ${{ inputs.actor }}
        INPUT_REPOSITORY: ${{ inputs.repository }}
        INPUT_REPOSITORY_URL: ${{ inputs.repository-url }}
        INPUT_FRONTEND_URL: ${{ inputs.frontend-url }}
        INPUT_WEBHOOK_URL: ${{ inputs.webhook-url }}
        PREPARE_TITLE: ${{ steps.prepare.outputs.title }}
        PREPARE_COLOR: ${{ steps.prepare.outputs.color }}
        PREPARE_COMPONENTS: ${{ steps.prepare.outputs.components }}
        PREPARE_ACTION_MESSAGE: ${{ steps.prepare.outputs.action_message }}
      run: |
        # タイムスタンプを生成
        TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%S.000Z)

        # 成功時と失敗時でペイロードを分岐
        if [ "$INPUT_STATUS" = "success" ]; then
          # 基本フィールドを構築
          FIELDS='[
            {"name": "Commit", "value": "'"$INPUT_COMMIT_SHA"'", "inline": true},
            {"name": "Branch", "value": "'"$INPUT_BRANCH_NAME"'", "inline": true},
            {"name": "Actor", "value": "'"$INPUT_ACTOR"'", "inline": true},
            {"name": "Repository", "value": "'"$INPUT_REPOSITORY"'", "inline": false},
            {"name": "Components Deployed", "value": "'"$PREPARE_COMPONENTS"'", "inline": false}'

          # Repository URLが空でない場合は追加
          if [ -n "$INPUT_REPOSITORY_URL" ]; then
            FIELDS="$FIELDS"',
            {"name": "🔗 Repository URL", "value": "'"$INPUT_REPOSITORY_URL"'", "inline": false}'
          fi

          # Frontend URLが空でない場合は追加
          if [ -n "$INPUT_FRONTEND_URL" ]; then
            FIELDS="$FIELDS"',
            {"name": "🌐 Frontend URL", "value": "'"$INPUT_FRONTEND_URL"'", "inline": false}'
          fi

          # フィールド配列を閉じる
          FIELDS="$FIELDS"']'

          PAYLOAD=$(cat <<EOF
        {
          "embeds": [{
            "title": "$PREPARE_TITLE",
            "color": $PREPARE_COLOR,
            "fields": $FIELDS,
            "timestamp": "$TIMESTAMP"
          }]
        }
        EOF
          )
        else
          PAYLOAD=$(cat <<EOF
        {
          "embeds": [{
            "title": "$PREPARE_TITLE",
            "color": $PREPARE_COLOR,
            "fields": [
              {"name": "Commit", "value": "$INPUT_COMMIT_SHA", "inline": true},
              {"name": "Branch", "value": "$INPUT_BRANCH_NAME", "inline": true},
              {"name": "Actor", "value": "$INPUT_ACTOR", "inline": true},
              {"name": "Repository", "value": "$INPUT_REPOSITORY", "inline": false},
              {"name": "Action", "value": "$PREPARE_ACTION_MESSAGE", "inline": false}
            ],
            "timestamp": "$TIMESTAMP"
          }]
        }
        EOF
          )
        fi

        # Discord Webhookに通知を送信
        curl -H "Content-Type: application/json" \
             -d "$PAYLOAD" \
             "$INPUT_WEBHOOK_URL" \
             --fail --silent --show-error

        echo "✅ Discord通知を正常に送信しました"