name: 'E2E Test'
description: 'Run end-to-end tests with Playwright'

inputs:
  client-directory:
    description: 'Client working directory'
    required: false
    default: './app/client'
  server-directory:
    description: 'Server working directory'
    required: false
    default: './app/server'
  client-port:
    description: 'Client port'
    required: false
    default: '3000'
  server-port:
    description: 'Server port'
    required: false
    default: '3001'
  db-host:
    description: 'Database host'
    required: false
    default: 'localhost'
  db-port:
    description: 'Database port'
    required: false
    default: '5432'
  db-name:
    description: 'Database name'
    required: false
    default: 'postgres'
  db-user:
    description: 'Database user'
    required: false
    default: 'postgres'
  db-password:
    description: 'Database password'
    required: false
    default: 'test_password'

runs:
  using: 'composite'
  steps:
    - name: Setup Bun Environment for Client
      uses: ./.github/actions/setup-bun
      with:
        working-directory: ${{ inputs.client-directory }}
        cache-key-suffix: e2e-client

    - name: Setup PostgreSQL Environment
      uses: ./.github/actions/setup-postgres
      with:
        db-host: ${{ inputs.db-host }}
        db-name: ${{ inputs.db-name }}
        db-user: ${{ inputs.db-user }}
        db-password: ${{ inputs.db-password }}

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22.x'

    - name: Install Playwright browsers
      shell: bash
      run: |
        cd ${{ inputs.client-directory }}
        npx playwright install --with-deps

    - name: Install server dependencies
      working-directory: ${{ inputs.server-directory }}
      shell: bash
      run: |
        bun install --frozen-lockfile
        npm install

    - name: Start services and run E2E tests
      shell: bash
      env:
        CLIENT_PORT: ${{ inputs.client-port }}
        SERVER_PORT: ${{ inputs.server-port }}
        NEXT_PUBLIC_API_BASE_URL: "http://localhost:${{ inputs.server-port }}/api"
        # Supabase test environment variables (mocked)
        NEXT_PUBLIC_SUPABASE_URL: http://localhost:54321
        NEXT_PUBLIC_SUPABASE_ANON_KEY: test_anon_key
        # Additional client environment variables
        NEXT_PUBLIC_TRUSTED_DOMAINS: localhost:${{ inputs.client-port }},localhost:${{ inputs.server-port }}
        NEXT_PUBLIC_SITE_URL: http://localhost:${{ inputs.client-port }}
      run: |
        set -euo pipefail

        # PID変数を初期化（set -uでのunbound variable回避）
        SERVER_PID=""
        CLIENT_PID=""

        # プロセスクリーンアップ関数
        cleanup() {
          echo "--- Cleaning up background processes ---"
          kill ${SERVER_PID:-} ${CLIENT_PID:-} 2>/dev/null || true
          wait ${SERVER_PID:-} ${CLIENT_PID:-} 2>/dev/null || true
        }
        
        # 失敗時とEXIT時にクリーンアップを実行
        trap cleanup EXIT ERR
        
        echo "--- Waiting for PostgreSQL to be ready ---"
        for i in $(seq 1 30); do
          if pg_isready -h ${{ inputs.db-host }} -p ${{ inputs.db-port }} -U ${{ inputs.db-user }}; then
            echo "PostgreSQL is ready!"
            break
          fi
          echo "Waiting for PostgreSQL... (attempt $i/30)"
          sleep 2
        done
        
        echo "--- Starting server in background (Node.js runtime) ---"
        cd ${{ inputs.server-directory }}
        SERVER_PORT=${{ inputs.server-port }} \
        ACCESS_ALLOW_ORIGIN=http://localhost:${{ inputs.client-port }} \
        ACCESS_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS \
        ACCESS_ALLOW_HEADERS=Authorization,Content-Type \
        SUPABASE_URL=http://localhost:54321 \
        DB_HOST=${{ inputs.db-host }} \
        DB_PORT=${{ inputs.db-port }} \
        DB_NAME=${{ inputs.db-name }} \
        DB_USER=${{ inputs.db-user }} \
        DB_PASSWORD=${{ inputs.db-password }} \
        BASE_SCHEMA=test_schema \
        DATABASE_URL=postgresql://${{ inputs.db-user }}:${{ inputs.db-password }}@${{ inputs.db-host }}:${{ inputs.db-port }}/${{ inputs.db-name }} \
        DB_CONNECT_TIMEOUT_SECONDS=3 \
        DB_IDLE_TIMEOUT_SECONDS=10 \
        DB_MAX_CONNECTIONS=5 \
        npm run start:node &
        SERVER_PID=$!
        cd ../..
        
        echo "--- Starting client in background ---"
        cd ${{ inputs.client-directory }}
        bun run dev &
        CLIENT_PID=$!
        cd ../..
        
        echo "--- Waiting for services to be ready ---"
        for i in $(seq 1 30); do
          if curl -f http://localhost:${{ inputs.client-port }} >/dev/null 2>&1 && \
             curl -f http://localhost:${{ inputs.server-port }}/api/health >/dev/null 2>&1; then
            echo "All services are ready!"
            break
          fi
          echo "Waiting for services... (attempt $i/30)"
          if [ $i -lt 10 ]; then
            sleep 2
          else  
            sleep 5
          fi
        done
        
        echo "--- Running Playwright tests ---"
        cd ${{ inputs.client-directory }}
        bun run test:e2e

    - name: Upload Playwright report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: playwright-report
        path: ${{ inputs.client-directory }}/playwright-report/
        retention-days: 30