services:
  server:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - ./app/server:/home/bun/app/server
      - ./app/packages:/home/bun/app/packages
      - ./docs/api:/home/bun/docs/api
    environment:
      - SERVER_PORT=${SERVER_PORT}
      - ACCESS_ALLOW_ORIGIN=${ACCESS_ALLOW_ORIGIN}
      - ACCESS_ALLOW_METHODS=${ACCESS_ALLOW_METHODS}
      - ACCESS_ALLOW_HEADERS=${ACCESS_ALLOW_HEADERS}
      - SUPABASE_URL=${SUPABASE_URL}
      - METRICS_NAMESPACE=${METRICS_NAMESPACE}
      # テスト用のローカルDB設定
      - ENVIRONMENT=preview
      - BASE_SCHEMA=app_test
      - DATABASE_URL=postgresql://postgres:test_password@db:5432/postgres
    depends_on:
      db:
        condition: service_healthy
    tty: true

  client:
    build:
      context: .
      dockerfile: docker/client/Dockerfile
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    volumes:
      - ./app/client:/home/bun/app/client
      - ./app/packages:/home/bun/app/packages
      - ./docs/api:/home/bun/docs/api:ro
    environment:
      - CLIENT_PORT=${CLIENT_PORT}
      - NEXT_PUBLIC_TRUSTED_DOMAINS=http://localhost:${CLIENT_PORT},http://localhost:${SERVER_PORT}
      - NEXT_PUBLIC_SITE_URL=http://localhost:${CLIENT_PORT}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - NEXT_PUBLIC_API_BASE_URL=http://localhost:${SERVER_PORT}
    depends_on:
      - server
    tty: true

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/db/init-test-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  e2e:
    image: mcr.microsoft.com/playwright:v1.55.0-jammy
    volumes:
      - ./app/client:/workspace
    working_dir: /workspace
    environment:
      - CI=true
    depends_on:
      - client
    command: tail -f /dev/null

  iac:
    build:
      context: .
      dockerfile: docker/terraform/Dockerfile
    volumes:
      - ~/.aws:/root/.aws:ro
      - ./terraform:/workspace
      - ./app/server/dist:/workspace/app/server/dist:ro
      - terraform_cache:/workspace/.terraform.d
    working_dir: /workspace
    environment:
      - AWS_ROLE_ARN=${AWS_ROLE_ARN}
      - AWS_REGION=${AWS_REGION}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - TF_VAR_project_name=${PROJECT_NAME}
      - TF_VAR_repository_name=${REPOSITORY_NAME}
      - TF_VAR_environment=${ENVIRONMENT:-preview}
      - TF_VAR_aws_region=${AWS_REGION}
      - TF_VAR_aws_oidc_role_arn=${AWS_OIDC_ROLE_ARN}
      - TF_VAR_database_url=${DATABASE_URL}
      - TF_VAR_cloudflare_api_token=${CLOUDFLARE_API_TOKEN}
      - TF_VAR_cloudflare_account_id=${CLOUDFLARE_ACCOUNT_ID}
      - TF_VAR_cloudflare_zone_id=${CLOUDFLARE_ZONE_ID}
      - TF_VAR_access_allow_origin_production=${ACCESS_ALLOW_ORIGIN_PRODUCTION:-https://localhost.example.com}
      - TF_VAR_access_allow_origin_preview=${ACCESS_ALLOW_ORIGIN_PREVIEW:-https://*.localhost.example.com}
      - TF_VAR_access_allow_methods=${ACCESS_ALLOW_METHODS}
      - TF_VAR_access_allow_headers=${ACCESS_ALLOW_HEADERS}
      - TF_VAR_domain_name=${DOMAIN_NAME}
      - TF_VAR_supabase_url=${SUPABASE_URL}
      - TF_VAR_database_url=${DATABASE_URL}
      - TF_VAR_base_schema=${BASE_SCHEMA}
      - TF_VAR_metrics_namespace=${METRICS_NAMESPACE}
    command: tail -f /dev/null

  semgrep:
    image: returntocorp/semgrep:1.96.0
    volumes:
      - .:/src:ro
    working_dir: /src
    user: semgrep
    profiles:
      - tools

volumes:
  postgres_data:
  terraform_cache:
