services:
  server:
    build:
      context: .
      dockerfile: docker/server/Dockerfile
    ports:
      - "${SERVER_PORT}:${SERVER_PORT}"
    volumes:
      - ./app/server:/home/bun/app/server
      - ./app/packages:/home/bun/app/packages
    environment:
      - SERVER_PORT=${SERVER_PORT}
      - ACCESS_ALLOW_ORIGIN=${ACCESS_ALLOW_ORIGIN}
      - ACCESS_ALLOW_METHODS=${ACCESS_ALLOW_METHODS}
      - ACCESS_ALLOW_HEADERS=${ACCESS_ALLOW_HEADERS}
      - SUPABASE_URL=${SUPABASE_URL}
      - SUPABASE_JWT_SECRET=${SUPABASE_JWT_SECRET}
      # テスト用のローカルDB設定
      - DB_HOST=db
      - DB_PORT=5432
      - DB_NAME=postgres
      - DB_USER=postgres
      - DB_PASSWORD=test_password
      - DB_TABLE_PREFIX=test_
      - DATABASE_URL=postgresql://postgres:test_password@db:5432/postgres
    depends_on:
      db:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${SERVER_PORT}/api/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    tty: true

  client:
    build:
      context: .
      dockerfile: docker/client/Dockerfile
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"
    volumes:
      - ./app/client:/home/bun/app/client
      - ./app/packages:/home/bun/app/packages
    environment:
      - CLIENT_PORT=${CLIENT_PORT}
      - NEXT_PUBLIC_TRUSTED_DOMAINS=${NEXT_PUBLIC_TRUSTED_DOMAINS}
      - NEXT_PUBLIC_SITE_URL=${NEXT_PUBLIC_SITE_URL}
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - DB_TABLE_PREFIX=${DB_TABLE_PREFIX}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:${CLIENT_PORT}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    depends_on:
      server:
        condition: service_healthy
    tty: true

  db:
    image: postgres:15-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=test_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/db/init-test-schema.sql:/docker-entrypoint-initdb.d/01-schema.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  e2e:
    image: mcr.microsoft.com/playwright:v1.55.0-jammy
    volumes:
      - ./app/client:/workspace
    working_dir: /workspace
    environment:
      - CI=true
    depends_on:
      - client
    command: tail -f /dev/null

volumes:
  postgres_data:
